/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.securedataapp;

//imports
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * GUI.java
 * 14th November 2021
 * Security Fundamentals and Development CA1 Part 2
 * Group F - Ruby Lennon (x19128355) et al.
 * Description - App GUI
 */

public class GUI extends javax.swing.JFrame {
    //declare variables
    String userChoice, username, password, ppsn;  
       
    //create scanner object
    Scanner scan = new Scanner(System.in);

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();//inistialise GUI components  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appTa = new javax.swing.JTextArea();
        applicationTp = new javax.swing.JTabbedPane();
        userLoginPnl = new javax.swing.JPanel();
        loginBtn = new javax.swing.JButton();
        createUserBtn = new javax.swing.JButton();
        printDetailsBtn = new javax.swing.JButton();
        userDetailsPnl = new javax.swing.JPanel();
        usernameTf = new javax.swing.JTextField();
        passwordTf = new javax.swing.JTextField();
        ppsnTf = new javax.swing.JTextField();
        usernameLbl = new javax.swing.JLabel();
        passwordLbl = new javax.swing.JLabel();
        ppsnLbl = new javax.swing.JLabel();
        updatePPSNBtn = new javax.swing.JButton();
        symmetricEncryptPnl = new javax.swing.JPanel();
        filenameLbl = new javax.swing.JLabel();
        filenameTf = new javax.swing.JTextField();
        writeFileBtn = new javax.swing.JButton();
        readFileBtn = new javax.swing.JButton();
        textAreaDisplay = new java.awt.TextArea();
        secreyKeyLbl = new javax.swing.JLabel();
        secretKey = new javax.swing.JTextField();
        fileTextAreaLbl = new javax.swing.JLabel();
        asymmetricEncryptPnl = new javax.swing.JPanel();
        asymmetricTextArea = new java.awt.TextArea();
        asymmetricBtnEncrypt = new javax.swing.JButton();
        asymmetricBtnDecrypt = new javax.swing.JButton();
        fileTextAreaLbl2 = new javax.swing.JLabel();
        fileCheckerPnl = new javax.swing.JPanel();
        fileOnePnl = new javax.swing.JPanel();
        filenameOneTf = new javax.swing.JTextField();
        filenameOneLbl = new javax.swing.JLabel();
        fileTwoPnl = new javax.swing.JPanel();
        filenameTwoLbl = new javax.swing.JLabel();
        filenameTwoTf = new javax.swing.JTextField();
        compareFilesBtn = new javax.swing.JButton();
        acceptedFileExtentionNoteLbl = new javax.swing.JLabel();
        noteLbl = new javax.swing.JLabel();
        exitApplicationBtn = new javax.swing.JButton();
        clearAppTaBtn = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        titleLbl.setText("Secure Data Application");

        appTa.setColumns(20);
        appTa.setRows(5);
        appTa.setBorder(javax.swing.BorderFactory.createTitledBorder("App Message"));
        jScrollPane1.setViewportView(appTa);
        appTa.getAccessibleContext().setAccessibleDescription("");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        createUserBtn.setText("Create New User");
        createUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserBtnActionPerformed(evt);
            }
        });

        printDetailsBtn.setText("Print PPSN Number");
        printDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printDetailsBtnActionPerformed(evt);
            }
        });

        userDetailsPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        usernameTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTfActionPerformed(evt);
            }
        });

        ppsnTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppsnTfActionPerformed(evt);
            }
        });

        usernameLbl.setText("Username: *");

        passwordLbl.setText("Password: *");

        ppsnLbl.setText("PPSN Number:");

        javax.swing.GroupLayout userDetailsPnlLayout = new javax.swing.GroupLayout(userDetailsPnl);
        userDetailsPnl.setLayout(userDetailsPnlLayout);
        userDetailsPnlLayout.setHorizontalGroup(
            userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(usernameLbl)
                    .addComponent(passwordLbl)
                    .addComponent(ppsnLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordTf, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addComponent(usernameTf)
                    .addComponent(ppsnTf))
                .addContainerGap())
        );
        userDetailsPnlLayout.setVerticalGroup(
            userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDetailsPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLbl))
                .addGap(18, 18, 18)
                .addGroup(userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLbl))
                .addGap(18, 18, 18)
                .addGroup(userDetailsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ppsnTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppsnLbl))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        updatePPSNBtn.setText("Update PPSN Number");
        updatePPSNBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePPSNBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userLoginPnlLayout = new javax.swing.GroupLayout(userLoginPnl);
        userLoginPnl.setLayout(userLoginPnlLayout);
        userLoginPnlLayout.setHorizontalGroup(
            userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userLoginPnlLayout.createSequentialGroup()
                .addContainerGap(231, Short.MAX_VALUE)
                .addGroup(userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(userDetailsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(userLoginPnlLayout.createSequentialGroup()
                        .addGroup(userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updatePPSNBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(userLoginPnlLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(printDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(createUserBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(234, 234, 234))
        );
        userLoginPnlLayout.setVerticalGroup(
            userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userLoginPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userDetailsPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createUserBtn)
                    .addComponent(loginBtn))
                .addGap(18, 18, 18)
                .addGroup(userLoginPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printDetailsBtn)
                    .addComponent(updatePPSNBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        applicationTp.addTab("User Details", userLoginPnl);

        filenameLbl.setText("File to Decrypt:");

        filenameTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameTfActionPerformed(evt);
            }
        });

        writeFileBtn.setText("Encrypt");
        writeFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeFileBtnActionPerformed(evt);
            }
        });

        readFileBtn.setText("Decrypt File");
        readFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFileBtnActionPerformed(evt);
            }
        });

        textAreaDisplay.setName(""); // NOI18N

        secreyKeyLbl.setText("SecretKey:");

        fileTextAreaLbl.setText("File text:");

        javax.swing.GroupLayout symmetricEncryptPnlLayout = new javax.swing.GroupLayout(symmetricEncryptPnl);
        symmetricEncryptPnl.setLayout(symmetricEncryptPnlLayout);
        symmetricEncryptPnlLayout.setHorizontalGroup(
            symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                        .addComponent(secreyKeyLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(secretKey, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textAreaDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                        .addGroup(symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                                .addComponent(fileTextAreaLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                                .addComponent(writeFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                                .addComponent(filenameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filenameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addComponent(readFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        symmetricEncryptPnlLayout.setVerticalGroup(
            symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symmetricEncryptPnlLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secreyKeyLbl)
                    .addComponent(secretKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileTextAreaLbl)
                .addGap(1, 1, 1)
                .addComponent(textAreaDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(symmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(writeFileBtn)
                    .addComponent(readFileBtn)
                    .addComponent(filenameLbl)
                    .addComponent(filenameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        applicationTp.addTab("Symmetric Encryption", symmetricEncryptPnl);

        asymmetricEncryptPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        asymmetricBtnEncrypt.setText("Encrypt");
        asymmetricBtnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asymmetricBtnEncryptActionPerformed(evt);
            }
        });

        asymmetricBtnDecrypt.setText("Decrypt");
        asymmetricBtnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asymmetricBtnDecryptActionPerformed(evt);
            }
        });

        fileTextAreaLbl2.setText("File text:");

        javax.swing.GroupLayout asymmetricEncryptPnlLayout = new javax.swing.GroupLayout(asymmetricEncryptPnl);
        asymmetricEncryptPnl.setLayout(asymmetricEncryptPnlLayout);
        asymmetricEncryptPnlLayout.setHorizontalGroup(
            asymmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asymmetricEncryptPnlLayout.createSequentialGroup()
                .addGroup(asymmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(asymmetricEncryptPnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(fileTextAreaLbl2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, asymmetricEncryptPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(asymmetricTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(asymmetricEncryptPnlLayout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addComponent(asymmetricBtnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 589, Short.MAX_VALUE)
                        .addComponent(asymmetricBtnDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        asymmetricEncryptPnlLayout.setVerticalGroup(
            asymmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, asymmetricEncryptPnlLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(fileTextAreaLbl2)
                .addGap(1, 1, 1)
                .addComponent(asymmetricTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(asymmetricEncryptPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asymmetricBtnEncrypt)
                    .addComponent(asymmetricBtnDecrypt))
                .addContainerGap())
        );

        applicationTp.addTab("Asymmetric Encryption", asymmetricEncryptPnl);

        fileOnePnl.setBorder(javax.swing.BorderFactory.createTitledBorder("File One"));
        fileOnePnl.setPreferredSize(new java.awt.Dimension(310, 150));

        filenameOneLbl.setText("Filename:");

        javax.swing.GroupLayout fileOnePnlLayout = new javax.swing.GroupLayout(fileOnePnl);
        fileOnePnl.setLayout(fileOnePnlLayout);
        fileOnePnlLayout.setHorizontalGroup(
            fileOnePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileOnePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filenameOneLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filenameOneTf, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        fileOnePnlLayout.setVerticalGroup(
            fileOnePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileOnePnlLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(fileOnePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filenameOneLbl)
                    .addComponent(filenameOneTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        fileTwoPnl.setBorder(javax.swing.BorderFactory.createTitledBorder("File Two"));
        fileTwoPnl.setPreferredSize(new java.awt.Dimension(310, 150));

        filenameTwoLbl.setText("Filename:");

        filenameTwoTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameTwoTfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileTwoPnlLayout = new javax.swing.GroupLayout(fileTwoPnl);
        fileTwoPnl.setLayout(fileTwoPnlLayout);
        fileTwoPnlLayout.setHorizontalGroup(
            fileTwoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTwoPnlLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(filenameTwoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filenameTwoTf, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        fileTwoPnlLayout.setVerticalGroup(
            fileTwoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTwoPnlLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(fileTwoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filenameTwoTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filenameTwoLbl))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        compareFilesBtn.setText("Compare Text Files");
        compareFilesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareFilesBtnActionPerformed(evt);
            }
        });

        acceptedFileExtentionNoteLbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        acceptedFileExtentionNoteLbl.setText("Accepted file extension: txt e.g. Test.txt");

        noteLbl.setText("Note: files must be located in NetBeans project folder to compare");

        javax.swing.GroupLayout fileCheckerPnlLayout = new javax.swing.GroupLayout(fileCheckerPnl);
        fileCheckerPnl.setLayout(fileCheckerPnlLayout);
        fileCheckerPnlLayout.setHorizontalGroup(
            fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileCheckerPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileCheckerPnlLayout.createSequentialGroup()
                        .addComponent(noteLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileCheckerPnlLayout.createSequentialGroup()
                        .addGroup(fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fileCheckerPnlLayout.createSequentialGroup()
                                .addComponent(acceptedFileExtentionNoteLbl)
                                .addGap(106, 106, 106)
                                .addComponent(compareFilesBtn)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(fileCheckerPnlLayout.createSequentialGroup()
                                .addComponent(fileOnePnl, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addComponent(fileTwoPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        fileCheckerPnlLayout.setVerticalGroup(
            fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileCheckerPnlLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileOnePnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileTwoPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileCheckerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compareFilesBtn)
                    .addComponent(acceptedFileExtentionNoteLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noteLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        applicationTp.addTab("File Checker", fileCheckerPnl);

        exitApplicationBtn.setText("Exit Application");
        exitApplicationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitApplicationBtnActionPerformed(evt);
            }
        });

        clearAppTaBtn.setText("Clear Message Log");
        clearAppTaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAppTaBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(applicationTp)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(clearAppTaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(exitApplicationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addComponent(titleLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(applicationTp, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitApplicationBtn)
                    .addComponent(clearAppTaBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    //compareFilesBtnActionPerformed action code 
    private void compareFilesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareFilesBtnActionPerformed
        if(filenameOneTf.getText().equalsIgnoreCase("")||filenameTwoTf.getText().equalsIgnoreCase("")){
            //if text is missing in the required text fields the user is alerted
            appTa.append("\nPlease enter both file names to compare.");
        }else if(!filenameOneTf.getText().toUpperCase().endsWith(".TXT")||!filenameTwoTf.getText().toUpperCase().endsWith(".TXT")){//if the filenames to not end in .txt
            appTa.append("\nSorry, only .txt files are accepted.");
        }else{
            //file one code
            String filenameOne = filenameOneTf.getText();//get the user input from the text field
            File fileOne = new File(filenameOne);//create new file object
            StringBuilder sbOne = new StringBuilder();//create new string builder object
            boolean fileOneFound = true;//boolean to indicate if file was found

            try (BufferedReader reader = new BufferedReader(new FileReader(fileOne))) {//try with resources
                String line;//string to store file contents

                while ((line = reader.readLine()) != null) {//while the next line in the file is not null
                    sbOne.append(line).append(" ");//append the next line to the string
                }
            } catch (FileNotFoundException e) {//if the file is not found
                //e.printStackTrace();
                appTa.append("\n'" + filenameOne + "' file not found");//print the following
                fileOneFound = false;//set the file one found boolean to false
            } catch (IOException e) {
                //e.printStackTrace();
            }
                       
            String fileOneString = sbOne.toString();//store the string builder value in string
            
            String encryptedFileOneString = Utils.HashFormatter(fileOneString);//convert the string value to hash value and store in string
            
            //file two code
            String filenameTwo = filenameTwoTf.getText();//get the user input from the text field 
            File fileTwo = new File(filenameTwo);//create new file object
            StringBuilder sbTwo = new StringBuilder();//create new string builder object
            boolean fileTwoFound = true;//boolean to indicate if file was found

            try (BufferedReader reader = new BufferedReader(new FileReader(fileTwo))) {//try with resources
                String line;//string to store file contents

                while ((line = reader.readLine()) != null) {//while the next line in the file is not null
                    sbTwo.append(line).append(" ");//append the next line to the string
                }
            } catch (FileNotFoundException e) {//if the file is not found
                //e.printStackTrace();
               appTa.append("\n'" + filenameTwo + "' file not found");//print the following
               fileTwoFound = false;//set the file two found boolean to false
            } catch (IOException e) {
                //e.printStackTrace();
            }

            String fileTwoString = sbTwo.toString();//store the string builder value in string

            String encryptedFileTwoString = Utils.HashFormatter(fileTwoString);//convert the string value to hash value and store in string                      

            if(fileOneFound == true && fileTwoFound == true){//if both files were found
                if(encryptedFileOneString.equals(encryptedFileTwoString)){//if the file one hash value equals the file two hash value
                    appTa.append("\nBoth files match!");//print the following
                }else{
                    appTa.append("\nThe files do not match.");//print the following
                }
            }         
        }
    }//GEN-LAST:event_compareFilesBtnActionPerformed

    private void filenameTwoTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameTwoTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenameTwoTfActionPerformed

    private void filenameTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenameTfActionPerformed

    private void exitApplicationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitApplicationBtnActionPerformed
        //exit the application
        System.exit(0);
    }//GEN-LAST:event_exitApplicationBtnActionPerformed

    private void readFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFileBtnActionPerformed
        if (!secretKey.getText().isEmpty()) {
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filePath = f.getAbsolutePath();
            filenameTf.setText(filePath);
            String encryptedString = Utils.readLineByLine(filePath);
            String decryptedString = AesEncryption.decrypt(encryptedString, secretKey.getText());
            textAreaDisplay.setText(decryptedString);
            secretKey.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Secret Key Can't be Empty");
        }
    }//GEN-LAST:event_readFileBtnActionPerformed

    private void writeFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeFileBtnActionPerformed
        String plainText = textAreaDisplay.getText();
        if (!secretKey.getText().isEmpty()) {
            try {
                String encryptedString = AesEncryption.encrypt(plainText, secretKey.getText());
                Utils.writeEncryptedStringToFile("symetricEncryptedFile.txt", encryptedString);
                filenameTf.setText("");
                textAreaDisplay.setText("");
                secretKey.setText("");
                Path currentRelativePath = Paths.get("");
                String path = currentRelativePath.toAbsolutePath().toString();
                JOptionPane.showMessageDialog(null, "File saved to your device");
                appTa.append("\nFile (symetricEncryptedFile.txt) was saved to your device on path: " + path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Secret Key Can't be Empty");
        }
    }//GEN-LAST:event_writeFileBtnActionPerformed

    private void clearAppTaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAppTaBtnActionPerformed
        appTa.setText("");
    }//GEN-LAST:event_clearAppTaBtnActionPerformed

    private void ppsnTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppsnTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ppsnTfActionPerformed

    private void usernameTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTfActionPerformed

    private void createUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserBtnActionPerformed
        if(usernameTf.getText().equalsIgnoreCase("")||passwordTf.getText().equalsIgnoreCase("")){
            //if text is missing in the required text fields the user is alerted
            appTa.append("\nPlease enter all required user creation information (username + password).");
        }else{
            username = usernameTf.getText();//get username from text field
            password = passwordTf.getText();//get password from text field

            String encryptedPassword = Utils.HashFormatter(password);//get hash value of password

            String createUserResponse = Utils.CreateUser(username, encryptedPassword);//store the create user response to string

            if(createUserResponse.toUpperCase().startsWith("DUPLICATE ENTRY")){//if the create user response starts with duplicate entry
                appTa.append("\nSorry, this username is unavailable.");//print this message
            }else if(createUserResponse.toUpperCase().startsWith("DATA TRUNCATION")){//if the create user response starts with data truncation
                appTa.append("\nInvalid username or password length.");//print this message
            }else{
                appTa.append("\n" + createUserResponse);//else print this response
            }
            
            //clear the text fields
            usernameTf.setText("");
            passwordTf.setText("");
            ppsnTf.setText("");
        }
    }//GEN-LAST:event_createUserBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        if(usernameTf.getText().equalsIgnoreCase("")||passwordTf.getText().equalsIgnoreCase("")){
            //if text is missing in the required text fields the user is alerted
            appTa.append("\nPlease enter all required login information (username + password).");
        }else{
            username = usernameTf.getText();//get username from text field
            password = passwordTf.getText();//get password from text field

            String encryptedPassword = Utils.HashFormatter(password);//get hash value of password

            appTa.append("\n"+Utils.CheckUser(username, encryptedPassword));//print the check user response
            
            //clear the text fields
            usernameTf.setText("");
            passwordTf.setText("");
            ppsnTf.setText("");
        }
        
    }//GEN-LAST:event_loginBtnActionPerformed

    private void updatePPSNBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePPSNBtnActionPerformed
        if(usernameTf.getText().equalsIgnoreCase("")||passwordTf.getText().equalsIgnoreCase("")||ppsnTf.getText().equalsIgnoreCase("")){
            //if text is missing in the required text fields the user is alerted
            appTa.append("\nPlease enter all required login information (username, password and PPSN).");
        }else{
            
            username = usernameTf.getText();//get username from text field
            password = passwordTf.getText();//get password from text field
            ppsn = ppsnTf.getText();//get PPSN from text field - plain text to be encrypted
            
            String encryptedPassword = Utils.HashFormatter(password);//get hash value of password
            
            if(Utils.CheckUser(username, encryptedPassword).equals("You have successfully logged in.")){//if the check user repsonse equals this text  
                String key = "IDeCVaBRGoWE1Xb+X4MdZrq7UXgB3M58m3Xpdk4b+uU=";//set the AES encryption key
                
                String cipherPPSN = AesEncryption.encrypt(ppsn, key);//encrypt the PPSN value by user using the key and store and return encrypted value
                                      
                appTa.append("\n" + Utils.UpdatePPSN(username, encryptedPassword, cipherPPSN));//update the user PPSN number (PPSN encrypted stored as encrypted in database)

            }else{//else if the login was unsuccessful
                appTa.append("\nLogin failed, please try again.");
            }
            
            //clear the text fields
            usernameTf.setText("");
            passwordTf.setText("");
            ppsnTf.setText("");
        }
    }//GEN-LAST:event_updatePPSNBtnActionPerformed

    private void printDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printDetailsBtnActionPerformed
        if(usernameTf.getText().equalsIgnoreCase("")||passwordTf.getText().equalsIgnoreCase("")){
            //if text is missing in the required text fields the user is alerted
            appTa.append("\nPlease enter all required login information (username and password).");
        }else{
            username = usernameTf.getText();//get username from text field
            password = passwordTf.getText();//get password from text field
            
            String encryptedPassword = Utils.HashFormatter(password);//get hash value of password
            
            if(Utils.CheckUser(username, encryptedPassword).equals("You have successfully logged in.")){//if the login details are correct              
                String key = "IDeCVaBRGoWE1Xb+X4MdZrq7UXgB3M58m3Xpdk4b+uU=";
                
                String userPPSN = Utils.GetUserDetails(username, encryptedPassword);//get the encrypted user PPSN from the database
                
                String decryptedString = AesEncryption.decrypt(userPPSN, key);//decrypt the user PPSN retrieved from database

                appTa.append("\nDecrypted PPSN: "+decryptedString);//print the decrypted PPSN 
            }else{
                appTa.append("\nLogin failed, please try again.");//print if the login failed
            }
            
            //clear the text fields
            usernameTf.setText("");
            passwordTf.setText("");
            ppsnTf.setText("");
        }

    }//GEN-LAST:event_printDetailsBtnActionPerformed

    private void asymmetricBtnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asymmetricBtnEncryptActionPerformed
        try {
            AsymmetricEncryption ac = new AsymmetricEncryption();
            PrivateKey privateKey = ac.getPrivate("KeyPair/privateKey");
            String msg = asymmetricTextArea.getText();
            String encrypted_msg = ac.encryptText(msg, privateKey);
            Utils.writeEncryptedStringToFile("asymetricEncryptedFile.txt", encrypted_msg);
            asymmetricTextArea.setText("");
            Path currentRelativePath = Paths.get("");
            String path = currentRelativePath.toAbsolutePath().toString();
            JOptionPane.showMessageDialog(null, "File saved to your device");
            appTa.append("\nFile (asymetricEncryptedFile.txt) was saved to your device on path: " + path);
        } catch (Exception e) {
            System.out.println("Error while encryption: " + e);
        }
    }//GEN-LAST:event_asymmetricBtnEncryptActionPerformed

    private void asymmetricBtnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asymmetricBtnDecryptActionPerformed
 try {
            AsymmetricEncryption ac = new AsymmetricEncryption();
            PublicKey publicKey = ac.getPublic("KeyPair/publicKey");
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            String filePath = f.getAbsolutePath();
            String encryptedString = Utils.readLineByLine(filePath);
            String decryptedString = ac.decryptText(encryptedString, publicKey);
            asymmetricTextArea.setText(decryptedString);
            JOptionPane.showMessageDialog(null, "Successful file decryption!");
        } catch (Exception e) {
            System.out.println("Error during decryption: " + e);
        }
    }//GEN-LAST:event_asymmetricBtnDecryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel acceptedFileExtentionNoteLbl;
    private javax.swing.JTextArea appTa;
    private javax.swing.JTabbedPane applicationTp;
    private javax.swing.JButton asymmetricBtnDecrypt;
    private javax.swing.JButton asymmetricBtnEncrypt;
    private javax.swing.JPanel asymmetricEncryptPnl;
    private java.awt.TextArea asymmetricTextArea;
    private javax.swing.JButton clearAppTaBtn;
    private javax.swing.JButton compareFilesBtn;
    private javax.swing.JButton createUserBtn;
    private javax.swing.JButton exitApplicationBtn;
    private javax.swing.JPanel fileCheckerPnl;
    private javax.swing.JPanel fileOnePnl;
    private javax.swing.JLabel fileTextAreaLbl;
    private javax.swing.JLabel fileTextAreaLbl2;
    private javax.swing.JPanel fileTwoPnl;
    private javax.swing.JLabel filenameLbl;
    private javax.swing.JLabel filenameOneLbl;
    private javax.swing.JTextField filenameOneTf;
    private javax.swing.JTextField filenameTf;
    private javax.swing.JLabel filenameTwoLbl;
    private javax.swing.JTextField filenameTwoTf;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JLabel noteLbl;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JTextField passwordTf;
    private javax.swing.JLabel ppsnLbl;
    private javax.swing.JTextField ppsnTf;
    private javax.swing.JButton printDetailsBtn;
    private javax.swing.JButton readFileBtn;
    private javax.swing.JTextField secretKey;
    private javax.swing.JLabel secreyKeyLbl;
    private javax.swing.JPanel symmetricEncryptPnl;
    private java.awt.TextArea textAreaDisplay;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton updatePPSNBtn;
    private javax.swing.JPanel userDetailsPnl;
    private javax.swing.JPanel userLoginPnl;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JTextField usernameTf;
    private javax.swing.JButton writeFileBtn;
    // End of variables declaration//GEN-END:variables
}
